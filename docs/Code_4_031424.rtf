{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import \{\
  IsOptional,\
  IsString,\
  IsEmail,\
  IsNumber,\
  IsDate,\
  IsBoolean,\
  MaxLength,\
  ValidateIf,\
\} from 'class-validator';\
\
export class CreatePQClientDto \{\
  @IsOptional()\
  @IsNumber()\
  cuid?: number;\
\
  @IsOptional()\
  @IsDate()\
  cadate?: Date;\
\
  @IsOptional()\
  @IsDate()\
  cedate?: Date;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(12)\
  ctype?: string;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(8)\
  cstatus?: string;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(16)\
  clientstatus?: string;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(16)\
  clientsubstatus?: string;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(3)\
  cismgmt?: string;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(72)\
  ccomp?: string;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(100)\
  caddr1?: string;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(100)\
  caddr2?: string;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(64)\
  ccity?: string;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(2)\
  cst?: string;\
\
  @IsOptional()\
  @IsNumber()\
  czip?: number;\
\
  @IsOptional()\
  @IsString()\
  cphone?: string;\
\
  @IsOptional()\
  @IsString()\
  cphonebilling?: string;\
\
  @IsOptional()\
  @IsString()\
  caltphone?: string;\
\
  @IsOptional()\
  @IsString()\
  csmsphone?: string;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(6)\
  cext?: string;\
\
  @IsOptional()\
  @IsString()\
  cfax?: string;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(40)\
  ccontact?: string;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(40)\
  ctitle?: string;\
\
  @ValidateIf((o) => o.cemail != null)\
  @IsEmail()\
  @MaxLength(80)\
  cemail?: string;\
\
  @ValidateIf((o) => o.cemailAlt != null)\
  @IsEmail()\
  @MaxLength(255)\
  cemailAlt?: string;\
\
  @ValidateIf((o) => o.cemailAlt2 != null)\
  @IsEmail()\
  @MaxLength(80)\
  cemailAlt2?: string;\
\
  @ValidateIf((o) => o.cemailAlt3 != null)\
  @IsEmail()\
  @MaxLength(80)\
  cemailAlt3?: string;\
\
  @ValidateIf((o) => o.cemailAlt4 != null)\
  @IsEmail()\
  @MaxLength(80)\
  cemailAlt4?: string;\
\
  @ValidateIf((o) => o.cemailAlt5 != null)\
  @IsEmail()\
  @MaxLength(80)\
  cemailAlt5?: string;\
\
  @ValidateIf((o) => o.cemailAlt6 != null)\
  @IsEmail()\
  @MaxLength(80)\
  cemailAlt6?: string;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(40)\
  ccontact2?: string;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(40)\
  ctitle2?: string;\
\
  @IsOptional()\
  @IsString()\
  cphone2?: string;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(6)\
  cext2?: string;\
\
  @ValidateIf((o) => o.cemail2 != null)\
  @IsEmail()\
  @MaxLength(255)\
  cemail2?: string;\
\
  @ValidateIf((o) => o.cemail2cc != null)\
  @IsEmail()\
  @MaxLength(255)\
  cemail2cc?: string;\
\
  @ValidateIf((o) => o.cemailbilling != null)\
  @IsEmail()\
  @MaxLength(255)\
  cemailbilling?: string;\
\
  @ValidateIf((o) => o.caltemailbilling != null)\
  @IsEmail()\
  @MaxLength(255)\
  caltemailbilling?: string;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(120)\
  curl?: string;\
\
  @IsOptional()\
  @IsString()\
  cnotes?: string;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(124)\
  cpayterms?: string;\
\
  @IsOptional()\
  @IsString()\
  cview?: string;\
\
  @IsOptional()\
  @IsNumber()\
  csalesid?: number;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(50)\
  creferral?: string;\
\
  @ValidateIf((o) => o.cwon != null)\
  @IsDate()\
  cwon?: Date;\
\
  @ValidateIf((o) => o.clost != null)\
  @IsDate()\
  clost?: Date;\
\
  @IsOptional()\
  @IsNumber()\
  cqbid?: number;\
\
  @IsOptional()\
  @IsString()\
  cqbresp?: string;\
\
  @IsOptional()\
  @IsNumber()\
  clatefee?: number;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(3)\
  cwaivelate?: string;\
\
  @IsOptional()\
  @IsNumber()\
  clotid?: number;\
\
  @IsOptional()\
  @IsNumber()\
  cinid?: number;\
\
  @IsOptional()\
  @IsBoolean()\
  capp?: boolean;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(5)\
  cinvpays?: string;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(2)\
  cstatus2?: string;\
\
  @IsOptional()\
  @IsNumber()\
  cstatusuid?: number;\
\
  @IsOptional()\
  @IsString()\
  cstatusreason?: string;\
\
  @ValidateIf((o) => o.cstatusdate != null)\
  @IsDate()\
  cstatusdate?: Date;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(24)\
  clatlon?: string;\
\
  @IsOptional()\
  @IsString()\
  cnnote?: string;\
\
  @ValidateIf((o) => o.cinspection != null)\
  @IsDate()\
  cinspection?: Date;\
\
  @ValidateIf((o) => o.clastcontact != null)\
  @IsDate()\
  clastcontact?: Date;\
\
  @IsOptional()\
  @IsNumber()\
  clastcontactuid?: number;\
\}\
\
export class UpdatePQClientDto \{\
  @IsOptional()\
  @IsNumber()\
  cuid?: number;\
\
  @IsOptional()\
  @IsDate()\
  cadate?: Date;\
\
  @IsOptional()\
  @IsDate()\
  cedate?: Date;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(12)\
  ctype?: string;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(8)\
  cstatus?: string;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(16)\
  clientstatus?: string;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(16)\
  clientsubstatus?: string;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(3)\
  cismgmt?: string;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(72)\
  ccomp?: string;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(100)\
  caddr1?: string;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(100)\
  caddr2?: string;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(64)\
  ccity?: string;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(2)\
  cst?: string;\
\
  @IsOptional()\
  @IsNumber()\
  czip?: number;\
\
  @IsOptional()\
  @IsString()\
  cphone?: string;\
\
  @IsOptional()\
  @IsString()\
  cphonebilling?: string;\
\
  @IsOptional()\
  @IsString()\
  caltphone?: string;\
\
  @IsOptional()\
  @IsString()\
  csmsphone?: string;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(6)\
  cext?: string;\
\
  @IsOptional()\
  @IsString()\
  cfax?: string;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(40)\
  ccontact?: string;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(40)\
  ctitle?: string;\
\
  @ValidateIf((o) => o.cemail != null)\
  @IsEmail()\
  @MaxLength(80)\
  cemail?: string;\
\
  @ValidateIf((o) => o.cemailAlt != null)\
  @IsEmail()\
  @MaxLength(255)\
  cemailAlt?: string;\
\
  @ValidateIf((o) => o.cemailAlt2 != null)\
  @IsEmail()\
  @MaxLength(80)\
  cemailAlt2?: string;\
\
  @ValidateIf((o) => o.cemailAlt3 != null)\
  @IsEmail()\
  @MaxLength(80)\
  cemailAlt3?: string;\
\
  @ValidateIf((o) => o.cemailAlt4 != null)\
  @IsEmail()\
  @MaxLength(80)\
  cemailAlt4?: string;\
\
  @ValidateIf((o) => o.cemailAlt5 != null)\
  @IsEmail()\
  @MaxLength(80)\
  cemailAlt5?: string;\
\
  @ValidateIf((o) => o.cemailAlt6 != null)\
  @IsEmail()\
  @MaxLength(80)\
  cemailAlt6?: string;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(40)\
  ccontact2?: string;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(40)\
  ctitle2?: string;\
\
  @IsOptional()\
  @IsString()\
  cphone2?: string;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(6)\
  cext2?: string;\
\
  @ValidateIf((o) => o.cemail2 != null)\
  @IsEmail()\
  @MaxLength(255)\
  cemail2?: string;\
\
  @ValidateIf((o) => o.cemail2cc != null)\
  @IsEmail()\
  @MaxLength(255)\
  cemail2cc?: string;\
\
  @ValidateIf((o) => o.cemailbilling != null)\
  @IsEmail()\
  @MaxLength(255)\
  cemailbilling?: string;\
\
  @ValidateIf((o) => o.caltemailbilling != null)\
  @IsEmail()\
  @MaxLength(255)\
  caltemailbilling?: string;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(120)\
  curl?: string;\
\
  @IsOptional()\
  @IsString()\
  cnotes?: string;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(124)\
  cpayterms?: string;\
\
  @IsOptional()\
  @IsString()\
  cview?: string;\
\
  @IsOptional()\
  @IsNumber()\
  csalesid?: number;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(50)\
  creferral?: string;\
\
  @ValidateIf((o) => o.cwon != null)\
  @IsDate()\
  cwon?: Date;\
\
  @ValidateIf((o) => o.clost != null)\
  @IsDate()\
  clost?: Date;\
\
  @IsOptional()\
  @IsNumber()\
  cqbid?: number;\
\
  @IsOptional()\
  @IsString()\
  cqbresp?: string;\
\
  @IsOptional()\
  @IsNumber()\
  clatefee?: number;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(3)\
  cwaivelate?: string;\
\
  @IsOptional()\
  @IsNumber()\
  clotid?: number;\
\
  @IsOptional()\
  @IsNumber()\
  cinid?: number;\
\
  @IsOptional()\
  @IsBoolean()\
  capp?: boolean;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(5)\
  cinvpays?: string;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(2)\
  cstatus2?: string;\
\
  @IsOptional()\
  @IsNumber()\
  cstatusuid?: number;\
\
  @IsOptional()\
  @IsString()\
  cstatusreason?: string;\
\
  @ValidateIf((o) => o.cstatusdate != null)\
  @IsDate()\
  cstatusdate?: Date;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(24)\
  clatlon?: string;\
\
  @IsOptional()\
  @IsString()\
  cnnote?: string;\
\
  @ValidateIf((o) => o.cinspection != null)\
  @IsDate()\
  cinspection?: Date;\
\
  @ValidateIf((o) => o.clastcontact != null)\
  @IsDate()\
  clastcontact?: Date;\
\
  @IsOptional()\
  @IsNumber()\
  clastcontactuid?: number;\
\}\
import \{ Module \} from '@nestjs/common';\
import \{ TypeOrmModule \} from '@nestjs/typeorm';\
import \{ DatabaseConfigModule \} from './config/database-config.module';\
import \{ DatabaseConfigService \} from './config/database-config.service';\
\
@Module(\{\
  imports: [\
    DatabaseConfigModule,\
    TypeOrmModule.forRootAsync(\{\
      imports: [DatabaseConfigModule],\
      inject: [DatabaseConfigService],\
      useFactory: async (dbConfigService: DatabaseConfigService) => \{\
        const dbConfig = await dbConfigService.getDatabaseConfig();\
        return \{\
          ...dbConfig,\
          autoLoadEntities: true,\
          database: 'DBSUPERIORDEMO',\
          cache: \{\
            duration: 30000,\
          \},\
          keepAlive: \{\
            interval: 30000,\
          \},\
        \};\
      \},\
    \}),\
  ],\
  providers: [DatabaseConfigService],\
  exports: [TypeOrmModule],\
\})\
export class DatabaseModule \{\}\
// event.dto.ts\
import \{\
  IsOptional,\
  IsInt,\
  IsString,\
  IsDate,\
  MaxLength,\
  IsEmail,\
\} from 'class-validator';\
import \{ Type \} from 'class-transformer';\
\
export class EventDto \{\
  @IsOptional()\
  @IsInt()\
  euid?: number;\
\
  @IsOptional()\
  @IsInt()\
  ejid?: number;\
\
  @IsOptional()\
  @IsInt()\
  ecid?: number;\
\
  @IsOptional()\
  @IsInt()\
  elid?: number;\
\
  @IsOptional()\
  @IsInt()\
  elocid?: number;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(24)\
  etype?: string;\
\
  @IsOptional()\
  @Type(() => Date)\
  @IsDate()\
  estartdts?: Date;\
\
  @IsOptional()\
  @Type(() => Date)\
  @IsDate()\
  eenddts?: Date;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(3)\
  eallday?: string;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(84)\
  etitle?: string;\
\
  @IsOptional()\
  @IsString()\
  edesc?: string;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(8)\
  estatus?: string;\
\
  @IsOptional()\
  @IsInt()\
  eauid?: number;\
\
  @IsOptional()\
  @Type(() => Date)\
  @IsDate()\
  eadts?: Date;\
\
  @IsOptional()\
  @IsInt()\
  eduration?: number;\
\
  @IsOptional()\
  @IsString()\
  @MaxLength(6)\
  edurationtyp?: string;\
\
  @IsOptional()\
  @IsEmail(\{\}, \{ each: true \})\
  notify_emails?: string[];\
\
  @IsOptional()\
  @IsString(\{ each: true \})\
  notify_names?: string[];\
\}\
import \{ Module \} from '@nestjs/common';\
import \{ TypeOrmModule \} from '@nestjs/typeorm';\
import \{ Event \} from './entities/event.entity';\
import \{ PQEventController \} from './events.controller';\
import \{ PQEventsService \} from './events.service';\
\
@Module(\{\
  imports: [TypeOrmModule.forFeature([Event])],\
  controllers: [PQEventController],\
  providers: [PQEventsService],\
\})\
export class EventsModule \{\}\
// app.module.ts\
import \{ Module \} from '@nestjs/common';\
import \{ PassportModule \} from '@nestjs/passport';\
import \{ JwtStrategy \} from './jwt.strategy';\
import \{ JwtAuthGuard \} from '../common/guards/jwt-auth.guard';\
import \{ UsersModule \} from '../users/users.module';\
import \{ JwtModule \} from '@nestjs/jwt';\
import \{ AuthService \} from './auth.service';\
import \{ AuthController \} from './auth.controller';\
\
@Module(\{\
  imports: [\
    JwtModule.register(\{\
      secret: process.env.SECRET_KEY,\
      signOptions: \{ expiresIn: '30m' \},\
    \}),\
    PassportModule.register(\{ defaultStrategy: 'jwt' \}),\
    UsersModule,\
    // ... other imports\
  ],\
  controllers: [AuthController],\
  providers: [JwtStrategy, JwtAuthGuard, AuthService],\
  exports: [PassportModule, JwtStrategy, JwtAuthGuard],\
\})\
export class AuthModule \{\}\
// public.decorator.ts\
import \{ SetMetadata \} from '@nestjs/common';\
\
export const IS_PUBLIC_KEY = 'isPublic';\
export const Public = () => SetMetadata(IS_PUBLIC_KEY, true);\
// dynamic-module-loader.service.ts\
import \{ Global, Injectable, Type \} from '@nestjs/common';\
import \{ LazyModuleLoader \} from '@nestjs/core';\
import \{ ModuleRef \} from '@nestjs/core';\
\
@Global()\
@Injectable()\
export class DynamicModuleLoaderService \{\
  constructor(\
    private lazyModuleLoader: LazyModuleLoader,\
    private moduleRef: ModuleRef,\
  ) \{\}\
\
  async loadModule(moduleImport: () => Promise<Type<any>>) \{\
    console.log("LOADING MODULE")\
    const module = await moduleImport();\
    const moduleRef = await this.lazyModuleLoader.load(() => module);\
    return moduleRef;\
  \}\
\
  getService<T>(service: Type<T>): T \{\
    return this.moduleRef.get(service, \{ strict: false \});\
  \}\
\}\
import \{ Controller, Get, Post, Body, Param, Req, Put, Delete, OnModuleInit, HttpException, HttpStatus, Query, ParseIntPipe \} from '@nestjs/common';\
import \{ ModuleRef \} from '@nestjs/core';\
import \{ ApiTags, ApiOperation, ApiResponse, ApiParam, ApiQuery \} from '@nestjs/swagger';\
import \{ PQEventsService \} from './events.service';\
import \{ Event \} from './entities/event.entity';\
\
@ApiTags('events')\
@Controller('events')\
export class PQEventController implements OnModuleInit \{\
  private pqEventsService: PQEventsService;\
\
  constructor(private moduleRef: ModuleRef) \{\}\
\
  onModuleInit() \{\
    this.pqEventsService = this.moduleRef.get(PQEventsService, \{ strict: false \});\
  \}\
\
\
  @Post()\
  @ApiOperation(\{ summary: 'Create a new PQ event' \})\
  @ApiResponse(\{ status: 201, description: 'Event created', type: Event \})\
  async create(@Req() req: Request, @Body() createPQEventDto: Event) \{\
    try \{\
      const schema = req.user?.schema;\
      return await this.pqEventsService.create(schema, createPQEventDto);\
    \} catch (error) \{\
      console.error(error);\
      throw new HttpException(\
        'Failed to create event',\
        HttpStatus.INTERNAL_SERVER_ERROR,\
      );\
    \}\
  \}\
\
  @Get()\
  @ApiOperation(\{ summary: 'Retrieve all PQ events' \})\
  @ApiResponse(\{ status: 200, description: 'Array of events', type: [Event] \})\
  async findAll(@Req() req: Request) \{\
    try \{\
      const schema = req.user?.schema;\
      return await this.pqEventsService.findAll(schema);\
    \} catch (error) \{\
      console.error(error);\
      throw new HttpException(\
        'Failed to fetch events',\
        HttpStatus.INTERNAL_SERVER_ERROR,\
      );\
    \}\
  \}\
\
  @Get(':id')\
  @ApiOperation(\{ summary: 'Get a PQ event by ID' \})\
  @ApiParam(\{ name: 'id', type: 'number' \})\
  @ApiResponse(\{ status: 200, description: 'Event object', type: Event \})\
  @ApiResponse(\{ status: 404, description: 'Event not found' \})\
  async findOne(@Req() req: Request, @Param('id') id: string) \{\
    try \{\
      const schema = req.user?.schema;\
      return await this.pqEventsService.findOne(schema, +id);\
    \} catch (error) \{\
      console.error(error);\
      throw new HttpException(\
        'Failed to fetch event by ID',\
        HttpStatus.INTERNAL_SERVER_ERROR,\
      );\
    \}\
  \}\
\
  @Put(':id')\
  @ApiOperation(\{ summary: 'Update a PQ event' \})\
  @ApiParam(\{ name: 'id', type: 'number' \})\
  @ApiResponse(\{ status: 200, description: 'Event updated', type: Event \})\
  @ApiResponse(\{ status: 404, description: 'Event not found' \})\
  async update(\
    @Req() req: Request,\
    @Param('id') id: string,\
    @Body() updatePQEventDto: Partial<Event>,\
  ) \{\
    try \{\
      const schema = req.user?.schema;\
      return await this.pqEventsService.update(schema, +id, updatePQEventDto);\
    \} catch (error) \{\
      console.error(error);\
      throw new HttpException(\
        'Failed to update event',\
        HttpStatus.INTERNAL_SERVER_ERROR,\
      );\
    \}\
  \}\
\
  @Delete(':id')\
  @ApiOperation(\{ summary: 'Delete a PQ event' \})\
  @ApiParam(\{ name: 'id', type: 'number' \})\
  @ApiResponse(\{ status: 204, description: 'Event deleted' \})\
  @ApiResponse(\{ status: 404, description: 'Event not found' \})\
  async remove(@Req() req: Request, @Param('id') id: string) \{\
    try \{\
      const schema = req.user?.schema;\
      return await this.pqEventsService.remove(schema, +id);\
    \} catch (error) \{\
      console.error(error);\
      throw new HttpException(\
        'Failed to delete event',\
        HttpStatus.INTERNAL_SERVER_ERROR,\
      );\
    \}\
  \}\
\
  @Get('user/:userId/date')\
  @ApiOperation(\{ summary: 'Get events by user ID and date' \})\
  @ApiQuery(\{ name: 'userId', type: 'number' \})\
  @ApiQuery(\{ name: 'date', type: 'string' \})\
  @ApiResponse(\{ status: 200, description: 'Array of events', type: [Event] \})\
  async getEventsByUserAndDate(\
    @Req() req: Request,\
    @Query('userId', ParseIntPipe) userId: number,\
    @Query('date') dateString: string,\
  ): Promise<Event[]> \{\
    try \{\
      const schema = req.user?.schema;\
      const date = new Date(dateString);\
      return await this.pqEventsService.findEventsByUserAndDate(\
        schema,\
        userId,\
        date,\
      );\
    \} catch (error) \{\
      console.error(error);\
      throw new HttpException(\
        'Failed to fetch events by user ID and date',\
        HttpStatus.INTERNAL_SERVER_ERROR,\
      );\
    \}\
  \}\
\}\
}